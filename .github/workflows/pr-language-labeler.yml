name: PR Language Labeler

on:
  pull_request:
    types: [ opened, ready_for_review, synchronize ]

permissions:
  contents: write
  pull-requests: write

jobs:
  labeling-languages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create package.json
        run: echo '{}' > package.json

      - name: Install dependencies
        run: npm install @octokit/rest node-fetch

      - name: Detect languages and add labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUM: ${{ github.event.pull_request.number }}
        run: |
          node --input-type=module -e "
          import { Octokit } from '@octokit/rest';
          import path from 'path';
          import fetch from 'node-fetch';

          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN,
            request: { fetch }
          });

          const extensionsToLanguages = {
            js: 'js',
            ts: 'ts',
            py: 'py',
            java: 'java',
            kt: 'kotlin',
            cpp: 'c++',
            go: 'go',
            exs: 'elixir',
            swift: 'swift'
            // 필요한 다른 확장자와 언어 매핑 추가
          };

          function getRandomColor() {
            return Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');
          }

          async function run() {
            const { data: files } = await octokit.pulls.listFiles({
              owner: process.env.GITHUB_REPOSITORY.split('/')[0],
              repo: process.env.GITHUB_REPOSITORY.split('/')[1],
              pull_number: process.env.PR_NUM,
            });

            const languages = new Set();
            files.forEach(file => {
              const ext = path.extname(file.filename).slice(1);
              if (extensionsToLanguages[ext]) {
                languages.add(extensionsToLanguages[ext]);
              }
            });

            for (const language of languages) {
              try {
                // Check if the label already exists
                await octokit.issues.getLabel({
                  owner: process.env.GITHUB_REPOSITORY.split('/')[0],
                  repo: process.env.GITHUB_REPOSITORY.split('/')[1],
                  name: language,
                });
              } catch (error) {
                if (error.status === 404) { // Label does not exist
                  const color = getRandomColor();
                  await octokit.issues.createLabel({
                    owner: process.env.GITHUB_REPOSITORY.split('/')[0],
                    repo: process.env.GITHUB_REPOSITORY.split('/')[1],
                    name: language,
                    color: color,
                  });
                } else {
                  throw error;
                }
              }
            }

            if (languages.size > 0) {
              await octokit.issues.addLabels({
                owner: process.env.GITHUB_REPOSITORY.split('/')[0],
                repo: process.env.GITHUB_REPOSITORY.split('/')[1],
                issue_number: process.env.PR_NUM,
                labels: Array.from(languages),
              });
            }
          }

          run().catch(err => console.error(err));
          "

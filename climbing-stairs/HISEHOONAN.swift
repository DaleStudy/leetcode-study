//
//  230.swift
//  Algorithm
//
//  Created by 안세훈 on 4/8/25.
//

//Climbing Stairs

class Solution { //다이나믹 프로그래밍.
    func climbStairs(_ n: Int) -> Int {
        if n < 4 {return n} // 0부터 4보다 작을때 까지는 걍 그 숫자 리턴

        var dp = [0,1,2,3] //dp에 쓸 기본 배열.

        for i in 4...n{
            dp.append(dp[i-2] + dp[i-1]) // 숫자의 전 + 숫자의 전전 = n의 숫자.
        }
        return dp[dp.count-1] //마지막 배열 리턴
    }
}

// 패턴

/*

** 1 or 2계단**
---------------------------
n = 1

1스탭
---------------------------
n = 2
1 + 1

2

2스탭
---------------------------
n = 3
1 + 1 + 1

2 + 1
1 + 2

3스탭
---------------------------
n = 4
1 + 1 + 1 + 1

2 + 1 + 1
1 + 2 + 1
1 + 1 + 2

2 + 2

5스탭
n + 1
---------------------------
n = 5
1 + 1 + 1 + 1 + 1

2 + 1 + 1 + 1
1 + 2 + 1 + 1
1 + 1 + 2 + 1
1 + 1 + 1 + 2

2 + 2 + 1
2 + 1 + 2
1 + 2 + 2

8스탭
n + 3
---------------------------
n = 6
1 + 1 + 1 + 1 + 1 + 1

2 + 1 + 1 + 1 + 1
1 + 2 + 1 + 1 + 1
1 + 1 + 2 + 1 + 1
1 + 1 + 1 + 2 + 1
1 + 1 + 1 + 1 + 2

2 + 2 + 1 + 1
2 + 1 + 2 + 1
2 + 1 + 1 + 2

1 + 2 + 2 + 1
1 + 2 + 1 + 2

1 + 1 + 2 + 2

2 + 2 + 2

13 스탭
---------------------------
n = 7
1 + 1 + 1 + 1 + 1 + 1 + 1

2 + 1 + 1 + 1 + 1 + 1
1 + 2 + 1 + 1 + 1 + 1
1 + 1 + 2 + 1 + 1 + 1
1 + 1 + 1 + 2 + 1 + 1
1 + 1 + 1 + 1 + 2 + 1
1 + 1 + 1 + 1 + 1 + 2

2 + 2 + 1 + 1 + 1
2 + 1 + 2 + 1 + 1
2 + 1 + 1 + 2 + 1
2 + 1 + 1 + 1 + 2

1 + 2 + 2 + 1 + 1
1 + 2 + 1 + 2 + 1
1 + 2 + 1 + 1 + 2

1 + 1 + 2 + 2 + 1
1 + 1 + 2 + 1 + 2

1 + 1 + 1 + 2 + 2

2 + 2 + 2 + 1
2 + 2 + 1 + 2
2 + 1 + 2 + 2

1 + 2 + 2 + 2

21개

n   = 1  2  3 | 4  5  6   7
cnt = 1, 2, 3,| 5, 8, 13, 21

 
? 피보나치자나?
*/
